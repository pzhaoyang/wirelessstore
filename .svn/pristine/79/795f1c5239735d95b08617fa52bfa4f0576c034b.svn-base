package com.uninet.xiaoyou.wirelessstore;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.MalformedURLException;


import jcifs.UniAddress;
import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbException;
import jcifs.smb.SmbFile;
import jcifs.smb.SmbFileInputStream;
import jcifs.smb.SmbFileOutputStream;
import jcifs.smb.SmbSession;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.text.format.Formatter;
import android.util.Log;


public class SmbOpApi{
	public static String TAG = "smbapp";
	
	public static String prefix = "smb://";
	public static String ip = "";
	public static final int TOAST_MSG_SHOW = 1000;
	public static final int PROGRESS_MSG_SHOW = 1001;

	public static String tmpdir = "";//Environment.getDownloadCacheDirectory().getPath() + mcontext.getPackageName() + "/tmp";// "/sdcard/Android/data/com.uninet.wirelessstore/tmp/";
	public static SmbFile CopyorCut_buffer = null;
	public static int CopyorCut_flag = -1;
	public static boolean io_failed_flag = false;
	public static long io_trans_bytes = 0;
	private static boolean append_flag = false;
	
	static Thread thread = null;
	
	private static ExchangeHandler eh = ExchangeHandler.GetExchangeHandlerInstance();
	
	public static String getSmbRoot(Context context,String ip){
		return prefix + SmbOpApi.getAuthbyUrl(context, ip) + "@" + ip + "/";
	}
	
	//保存登录信息和ip到文件
	private static void saveAuth(Context context,String ip,String user_auth){
		SharedPreferences sp = context.getSharedPreferences("smburlinfo",0);
		Editor ed = sp.edit();
		ed.putString(ip, user_auth);
		ed.commit();
		tmpdir = Environment.getExternalStorageDirectory()
				+"/Android/"
				+ context.getPackageName()
				+ "/.cache/";
		Log.d(TAG,"tmpdir = " + tmpdir);
		Log.d(TAG,"Save Auth Success !");
	}
	
	public static String getAuthbyUrl(Context context, String ip){
		SharedPreferences sp = context.getSharedPreferences("smburlinfo", 0);
		return sp.getString(ip, "");
	}
	
	public static SmbFile getSmbFileByUrl(String smburl){
		try {
			return new SmbFile(smburl);
		} catch(MalformedURLException e){
			Log.d(SmbOpApi.TAG,"MalformedURLException Error! :" + e.getMessage());
		} catch(Exception e){
			Log.d(SmbOpApi.TAG,"normal Exception Error! :" + e.getMessage());
		}
		return null;
	}
	
	//登录
    public static void login(Context context, String ip,String user_auth) throws Exception {
        UniAddress dc = UniAddress.getByName(ip);
        NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(user_auth);
        SmbSession.logon(dc,auth);
        Log.d(TAG,"Login " + ip+ " Success!");
        saveAuth(context, ip, user_auth);
    }
    
	public static String mkdir(SmbFile sbf){
		String result_msg;
		
		try {
			if(!sbf.exists()){
				sbf.mkdir();
			}
			result_msg = "Create Folder " + sbf.getName() + " Success!";
		} catch (SmbException e) {
			result_msg = "Create Folder " + sbf.getName() + " Failed!";
			Log.d(TAG,"mkdir Error!:" + e.getMessage());
		}
		
		return result_msg;
	}
	
	public static String delete(SmbFile sbf){
		String result_msg = "";

		try {
			sbf.delete();
			result_msg = "Delete " + sbf.getName() + " Success!";
		} catch (SmbException e) {
			result_msg = "Delete " + sbf.getName() + " Failed!";
			Log.d(TAG,"delete Error!: " + e.getMessage());
		}
		
		return result_msg;
	}
	
	public static String rename(SmbFile from, SmbFile to){
		String result_msg;
		
		try {
			Log.d(TAG,"to == " + to.toString());
			from.renameTo(to);
			result_msg = "Rename " + from.getName() + " to " + to.getName() + " Success!";
		} catch (SmbException e) {
			result_msg = "Rename " + from.getName() + " to " + to.getName() + " Failed!";
			Log.d(TAG,"rename Error!:" + e.getMessage());
		}
		return result_msg;
	}
	
	public static String pst(final SmbFile des){
		String toast = "";
		try {
			CopyorCut_buffer.copyTo(des);
			if(CopyorCut_flag == 1){
				CopyorCut_buffer.delete();
			}
			toast = (CopyorCut_flag == 1 ? "Cut " : "Copy ") + CopyorCut_buffer.getName() + " Success!";
			CopyorCut_buffer = null;
			CopyorCut_flag = -1;
			Log.d("abc","paste end!...");
		} catch (Exception e) {
			toast = e.getMessage();
			Log.d(TAG,"pst Error: " + e.getMessage());
		}
		return toast;
	}
	
	public static void copy(SmbFile slectedfile){
		if(slectedfile == null){
			Log.d(TAG,"copy param error!");
			return;
		}
		CopyorCut_flag = 0;
		CopyorCut_buffer = slectedfile;
		eh.sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,"Copy "+ CopyorCut_buffer.getName() + " Success!"));
	}

	public static void cut(SmbFile slectedfile){
		if(slectedfile == null){
			Log.d(TAG,"copy param error!");
			return;
		}
		
		CopyorCut_flag = 1;
		CopyorCut_buffer = slectedfile;
		eh.sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,"Cut "+ CopyorCut_buffer.getName() + " Success!"));
	}

	public static String dl(SmbFile seletcedfile, String target_folder){
		 long total = io_trans_bytes;
		 String toast  = "";
		 Log.d("abc","dl entry..");
			Log.d("abc", "io_trans_bytes = " + io_trans_bytes);
		   try {
			SmbFileInputStream in = new SmbFileInputStream(seletcedfile);
			FileOutputStream out = new FileOutputStream(target_folder + "/" + seletcedfile.getName(),append_flag);
			
			int n;
			byte[] b = new byte[8192];
			
	        //跳过已经下载的字节
	        in.skip(io_trans_bytes);
	        
	        while((n = in.read( b )) > 0 ) {
	            out.write( b, 0, n );
	            total += n;
	            setProgressValue(total,getsize(seletcedfile));
	            Log.d("abc","total = " + total);
	            Log.d(TAG,"download total = " + total +", length = " + seletcedfile.length());
	        }
	        in.close();
	        out.close();
	        append_flag = false;
			io_trans_bytes = 0;
			toast = "Download "+ seletcedfile.getName() + " Success!";
		} catch (Exception e){
			append_flag = true;
			io_trans_bytes = total;
			Log.d("abc","dl Error: " + e.getMessage());
		}
	    
		return toast;
	}
	
	public static String up(SmbFile savedfile, String pickedfie){
		String toast = "";
		long tot = io_trans_bytes;
		try {
	        FileInputStream in = new FileInputStream(pickedfie);
	        SmbFileOutputStream out = new SmbFileOutputStream(savedfile,append_flag);

			in.skip(io_trans_bytes);
			
	        byte[] b = new byte[8192];
	        int n;
	        long filelen = (new File(pickedfie)).length();
	        while(( n = in.read( b )) > 0 ) {
	            out.write( b, 0, n );
	            tot += n;
		        setProgressValue(tot,filelen);
	        }
		    in.close();
		    out.close();
		    append_flag = false;
			io_trans_bytes = 0;
			toast = "Upload "+ savedfile.getName() + " Success!";
		} catch (Exception e) {
			append_flag = true;
			io_trans_bytes = tot;
		}
		return toast;
	}
	
	public static boolean isExists(String smbfile){
		boolean result = false;
		try {
			SmbFile f = new SmbFile(smbfile);
			result = f.exists();
		} catch (Exception e) {
			Log.d(TAG, smbfile + " isn't exist !");
		}
		
		return result;
	}
	
	public static boolean isDir(SmbFile sbf){
		boolean isdir = false;
		
		if(sbf == null) return false;
		
		try{
			isdir = sbf.isDirectory();
		}catch(SmbException e){
			Log.d(SmbOpApi.TAG,"e = " + e.getMessage());
		}
		Log.d(SmbOpApi.TAG,"curnode " + sbf.getName() + " is dir = " + isdir);
		return isdir;
	}
	
	public static String[] getListArray(Handler uihander, SmbFile sbf){
		if(sbf != null){
			try{
				return sbf.list();
			}catch(SmbException e){
				Message msg = uihander.obtainMessage(TOAST_MSG_SHOW);
				msg.obj = "No Permission !";
				msg.sendToTarget();
				Log.d(SmbOpApi.TAG,"getListLength Error:" + e.getMessage());
			}
		}
		
		return new String[0];
	}
	
	private static long getsize(SmbFile sbf){
		long size = 0L;
		try {
			size = sbf.length();
		} catch (SmbException e) {
			Log.d(SmbOpApi.TAG,"getsize Error:" + e.getMessage());
		}
		return size;
	}
	
	public static String getFileSize(Context context, SmbFile sbf){
		long size = 0L;
		try {
			size = sbf.length();
		} catch (SmbException e) {
			Log.d(SmbOpApi.TAG,"getFileSize Error:" + e.getMessage());
		}
		return Formatter.formatFileSize(context,size);
	}
	
	private static void setProgressValue(long total,long filelength){
		int progress = (int)(total*100/filelength);
		eh.sendMessage(Init.MsgElement(ExchangeHandler.MSG_SET_PROGRESS,progress));
	}
	
	public static String getDiskFreeSpace(Context context, SmbFile dir){
		long size = 0L;
		long free = 0L;
		try {
			free = dir.getDiskFreeSpace();
			size = dir.length();
		} catch (SmbException e) {
			Log.d(TAG,"getDiskFreeSpace Error!: " + e.getMessage());
		}
	
		return "剩余:"+Formatter.formatFileSize(context,free);//+"/" +"总共:"+ Formatter.formatFileSize(context,size);
	}

	public static void ResetFlgs(){
		//up & down & cache
		io_trans_bytes = 0;
		append_flag = false;
		
		//paste
		CopyorCut_buffer = null;
		CopyorCut_flag = -1;
	}
	
	public static boolean getAppendFlg(){
		return append_flag;
	}
	
	public static void setAppendFlg(boolean af){
		append_flag = af;
	}
}