package com.uninet.xiaoyou.wirelessstore;

import com.uninet.xiaoyou.*;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;

import jcifs.smb.*;

import java.util.*;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.format.Formatter;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

public class SmbListActivity extends ListActivity{

	
	private String root = "/";
	private String CurrPath = "";
	private IconifiedText SelectedItem = null;
	
	public static final int REQUEST_CODE_UPLOAD = 1;
	public static final int REQUEST_CODE_DOWNLOAD = 2;
	public static final int REQUEST_CODE_BAK_DIR_SETTING = 3;
	
	final static int DLG_NEGATIVE_BT = 1;
	final static int DLG_NEUTRAL_BT = 2;
	final static int DLG_POSITIVE_BT = 3;
	
	
	public static Handler mUIUpdate;
	private static Context mContext;
	
	private static final int MENU_RENAME_ID = 3;
	private static final int MENU_DELETE_ID = 4;
	private static final int MENU_COPY_ID = 5;
	private static final int MENU_CUT_ID = 6;
	private static final int MENU_PAST_ID = 7;
	private static final int MENU_DOWNLOAD_ID = 8;
	private static final int MENU_UPLOAD_ID = 9;
	private static final int MENU_NEW_FOLDER_ID = 10;
	private static final int MENU_SETTING_ID = 11;
	private static final int DIALOG_DOWNLOAD_RETRY_ID = 12;
	private static final int DIALOG_UPLOAD_RETRY_ID = 13;
	private static final int MENU_BAKING_ID = 14;
	
	private IconifiedTextListAdapter listItemAdapter = null;
	private SearchTask task = null;
	private ArrayList<IconifiedText> alist = new ArrayList<IconifiedText>();
	private int getIconbyFile(String filepath){
		int icon = R.drawable.ic_launcher;
		SmbFile file = SmbOpApi.getSmbFileByUrl(filepath);
		
		if(SmbOpApi.isDir(file)){
			icon = R.drawable.folder;
		}else{
			icon = MimeUtils.getIconbyType(MimeUtils.getmimetype(MimeUtils.getextension(file.getName())));
		}
		
		return icon;
	}
	
	private void setAdapter(){
		listItemAdapter = new IconifiedTextListAdapter(SmbListActivity.this);
		listItemAdapter.setListItems(alist);
        setListAdapter(listItemAdapter);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		setTitle(CurrPath.substring(CurrPath.indexOf("@")+1));
		setAdapter();
	}
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		SmbOpApi.ip = getIntent().getStringExtra("url");
		CurrPath = root = SmbOpApi.getSmbRoot(this, SmbOpApi.ip);
		
		setContentView(R.layout.activity_list);
		mContext = this;
		
		Log.d("abc","start server... before");
		Intent intent = new Intent(SmbListActivity.this, StreamService.class);
		startService(intent);
		Log.d("abc","start server... after");
		
		GeneralUtil.SetAuth(SmbOpApi.getAuthbyUrl(SmbListActivity.this, SmbOpApi.ip));
        searchFile(root);
        
        getListView().setOnCreateContextMenuListener(this);
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo)menuInfo;
		IconifiedTextListAdapter adapter = (IconifiedTextListAdapter) getListAdapter();
		SelectedItem = (IconifiedText) adapter.getItem(info.position);
		Log.d("abc","menu SelectedItem = " + SelectedItem.getText());
		if(SelectedItem.getText().equals("..")){
			return;
		}
		
		menu.setHeaderTitle("执行操作");
		menu.add(0, MENU_RENAME_ID, 0, "重命名");
		menu.add(0, MENU_DELETE_ID, 0, "删除");
		menu.add(0, MENU_COPY_ID, 0, "复制");
		menu.add(0, MENU_CUT_ID, 0, "剪切");
		if(!SelectedItem.isFile()){
			menu.add(0, MENU_UPLOAD_ID, 0, "上传");
			menu.add(0, MENU_PAST_ID, 0, "粘贴");
			menu.add(0, MENU_NEW_FOLDER_ID, 0, "新建目录");
		}else{
			menu.add(0, MENU_DOWNLOAD_ID, 0, "下载");
		}
		super.onCreateContextMenu(menu, v, menuInfo);
	}
	@Override
	public boolean onContextItemSelected(MenuItem item) {
		
		showDialog(item.getItemId());
		return super.onContextItemSelected(item);
	}
	
	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		switch (id) {
        case MENU_RENAME_ID:
        	EditText et = (EditText) dialog.findViewById(R.id.foldername);
            et.setText(SelectedItem.getText());
            break;
        case MENU_DELETE_ID:
            ((AlertDialog) dialog).setMessage("确认删除 "+ SelectedItem.getText() +" 吗?");
            break;
        case MENU_UPLOAD_ID:
        	new BrowsLocalFileTask("/storage");
            break;
		}

	}
	@Override
	protected Dialog onCreateDialog(int id) {
		
		switch (id) {
			case MENU_RENAME_ID:
				Log.d("abc", "item rename = " + SelectedItem.getText());
				LayoutInflater inflater = LayoutInflater.from(this);
				View view = inflater.inflate(R.layout.dialog_new_folder, null);
				final EditText et2 = (EditText) view.findViewById(R.id.foldername);
				return new OpAlertDlg(mContext,"重命名",view,
						setAlertBt("取消",getDialogListener(MENU_RENAME_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("确定",getDialogListener(MENU_RENAME_ID,DLG_POSITIVE_BT,et2))).create();
			case MENU_DELETE_ID:
				return new OpAlertDlg(mContext,"删除","确认删除 "+ SelectedItem.getText() +" 吗?",
						setAlertBt("取消",getDialogListener(MENU_DELETE_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("确定",getDialogListener(MENU_DELETE_ID,DLG_POSITIVE_BT))).create();

			case MENU_COPY_ID:
				SmbOpApi.copy(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath()));
				SelectedItem = null;
				break;
			case MENU_CUT_ID:
				SmbOpApi.cut(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath()));
				SelectedItem = null;
				break;
			case MENU_PAST_ID:
				if(SmbOpApi.CopyorCut_buffer != null){
					Init.th.GetMessageHander().post(new pasterunning(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath() + SmbOpApi.CopyorCut_buffer.getName())) );
					SelectedItem = null;
				}else{
					ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST, 
							 "请先复制/剪切"));
				}
				break;
			case MENU_DOWNLOAD_ID:
				view = BrowsLocalFileTask.SetDialogListAdapter(this);
				new BrowsLocalFileTask("/storage");
				return new OpAlertDlg(mContext,"选取下载目录",view,
						setAlertBt("取消",getDialogListener(MENU_DOWNLOAD_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("确定",getDialogListener(MENU_DOWNLOAD_ID,DLG_POSITIVE_BT))).create(); 
			case MENU_UPLOAD_ID:
				view = BrowsLocalFileTask.SetDialogListAdapter(this);
				new BrowsLocalFileTask("/storage");
				return new OpAlertDlg(mContext,"选取上传文件",view,
						setAlertBt("取消",getDialogListener(MENU_UPLOAD_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("确定",getDialogListener(MENU_UPLOAD_ID,DLG_POSITIVE_BT))).create();
			case MENU_NEW_FOLDER_ID:
				inflater = LayoutInflater.from(this);
				view = inflater.inflate(R.layout.dialog_new_folder, null);
				final EditText et3 = (EditText) view.findViewById(R.id.foldername);
				return new OpAlertDlg(mContext,"新建文件夹",view,
						setAlertBt("取消",getDialogListener(MENU_NEW_FOLDER_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("确定",getDialogListener(MENU_NEW_FOLDER_ID,DLG_POSITIVE_BT,et3))).create();
			case DIALOG_DOWNLOAD_RETRY_ID:
				return new OpAlertDlg(mContext,"任务失败",
						setAlertBt("取消",getDialogListener(DIALOG_DOWNLOAD_RETRY_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("重试",getDialogListener(DIALOG_DOWNLOAD_RETRY_ID,DLG_POSITIVE_BT))).create();
			case DIALOG_UPLOAD_RETRY_ID:
				return new OpAlertDlg(mContext,"任务失败",
						setAlertBt("取消",getDialogListener(DIALOG_UPLOAD_RETRY_ID,DLG_NEGATIVE_BT)),
						null,
						setAlertBt("重试",getDialogListener(DIALOG_UPLOAD_RETRY_ID,DLG_POSITIVE_BT))).create();				
		}
		return null;
	}
	
	@Override
	public void onBackPressed() {
		if(!CurrPath.equals(root)){
			searchFile(SmbOpApi.getSmbFileByUrl(CurrPath).getParent().toString());
		}else
			super.onBackPressed();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(Menu.NONE, MENU_SETTING_ID, 0, "备份目录设置");
		menu.add(Menu.NONE, MENU_NEW_FOLDER_ID, 0, "新建文件夹");
		menu.add(Menu.NONE, MENU_UPLOAD_ID, 0, "上传文件");
		menu.add(Menu.NONE, MENU_BAKING_ID, 0, "开始备份");
		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	
		switch(item.getItemId()){
		case MENU_SETTING_ID:
	        Intent intent = new Intent();
	        intent.setClass(this, WirelessSettingActivity.class);
			startActivity(intent);
            break;
		case MENU_NEW_FOLDER_ID:
			LayoutInflater inflater = LayoutInflater.from(this);
			View view = inflater.inflate(R.layout.dialog_new_folder, null);
			final EditText et3 = (EditText) view.findViewById(R.id.foldername);
			new OpAlertDlg(mContext,"新建文件夹",view,
					setAlertBt("取消",getDialogListener(MENU_NEW_FOLDER_ID,DLG_NEGATIVE_BT)),
					null,
					setAlertBt("确定",getDialogListener(MENU_NEW_FOLDER_ID,DLG_POSITIVE_BT,et3))).show();
			break;
		case MENU_UPLOAD_ID:
			showDialog(MENU_UPLOAD_ID);
			 break;
		case MENU_BAKING_ID:
			new Backup(SmbListActivity.this,mUIUpdate);
			 break;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	
	private void showtotal(SmbFile disk){
		String total  = SmbOpApi.getDiskFreeSpace(SmbListActivity.this, disk);
		TextView tv = (TextView)findViewById(R.id.volume_tip);
		tv.setText(total);
	}
	
	
	private void openfile(IconifiedText it){
		String httpReq = "http://" + GeneralUtil.localip + ":" + GeneralUtil.port + "/smb=";
		Log.d("abc","source1 path = " + it.getPath());
		String tmp = SmbOpApi.prefix + SmbOpApi.getAuthbyUrl(mContext, SmbOpApi.ip ) + "@";
		String path = it.getPath().substring(tmp.length());
		Log.d("abc","source path = " + path);
		String mimetype = MimeUtils.getmimetype(MimeUtils.getextension(it.getText()));
		Uri uri;
		Log.d(SmbOpApi.TAG,"substring path = " + path + ",\nmimetype = " + mimetype);
		
		if( mimetype.contains("image")
			||mimetype.contains("text")
			||mimetype.contains("video")
			||mimetype.contains("audio")){
			try {
				path = URLEncoder.encode(path, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				Log.d(SmbOpApi.TAG,"UnsupportedEncodingException Error!: " + e);
			}
			Log.d("abc","path  = " + path );
			String url = httpReq + path;
			Log.d(SmbOpApi.TAG,"http endoced url : "  + url);
			uri = Uri.parse(url);
			
			Intent intent = new Intent(Intent.ACTION_VIEW);
			intent.setDataAndType(uri, mimetype);
			startActivity(intent);
		}else{
			File dir = new File(SmbOpApi.tmpdir);
			if(!dir.exists()){
				dir.mkdirs();
			}
			Init.th.GetMessageHander().post(new cachefilerunning(getContext(),SmbOpApi.getSmbFileByUrl(it.getPath()), mimetype));
		}
	}
	
	private void searchFile(String path){
		if (task == null || task.getStatus().equals(AsyncTask.Status.FINISHED)){
			new SearchTask().execute(path);
		}
	}
	
	class SearchTask extends AsyncTask<String, Void, Void>{
		ArrayList<IconifiedText> item = new ArrayList<IconifiedText>();
		private ProgressDialog dialog = null;
		
		@Override
		protected void onPreExecute(){
			super.onPreExecute();
			dialog = new ProgressDialog(SmbListActivity.this);
			dialog.setMessage("正在加载...");
			dialog.setCanceledOnTouchOutside(false);
			dialog.show();
		}

		@Override
		protected Void doInBackground(String... params){
			try {
				Log.d(SmbOpApi.TAG,"SearchTask");
				Log.d(SmbOpApi.TAG,"SearchTask params[0]" + params[0]);
				SmbFile smbFile = new SmbFile(params[0]);
				ArrayList<SmbFile> dirList = new ArrayList<SmbFile>();
				ArrayList<SmbFile> fileList = new ArrayList<SmbFile>();
	
				setCurrPath(smbFile);
				
				SmbFile[] fs = smbFile.listFiles();
				
				for (SmbFile f : fs){
					if (f.isDirectory()){
						dirList.add(f);
					} else {
						fileList.add(f);
					}
				}
	
				dirList.addAll(fileList);
	
				for (SmbFile f : dirList){
					String filePath = f.getPath();
					String fileName = f.getName();
					boolean isFile = f.isFile();
					String fileSize = Formatter.formatFileSize(SmbListActivity.this, f.length());
					Drawable dab = getResources().getDrawable(
							getIconbyFile(filePath));
					/*IconifiedText(String filename, String filepath,boolean isfile, Drawable fileicon,);*/
					if(isFile){
						item.add(new IconifiedText(fileName, filePath, isFile, fileSize, dab));
					}else{
						item.add(new IconifiedText(fileName, filePath, isFile, dab));
					}
				}
	
			}catch (MalformedURLException e){
					Log.d(SmbOpApi.TAG, "MalformedURLException = " + e);
			}catch (SmbException e){
					Log.d(SmbOpApi.TAG, "SmbException = " + e);
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);
			
			alist.clear();
			if(!isRoot()){
				String up = SmbOpApi.getSmbFileByUrl(CurrPath).getParent().toString();
				alist.add(new IconifiedText("..", up, false, getResources().getDrawable(R.drawable.folder)));
			}
			
			for (IconifiedText i : item){
				alist.add(i);
			}

			dialog.cancel();
			showtotal(SmbOpApi.getSmbFileByUrl(CurrPath));
			listItemAdapter.notifyDataSetChanged();
		}

	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		Log.d("abc","aaaaaa");
		IconifiedText it = alist.get(position);
		
		String path = it.getPath();
		CurrPath = path;
		Log.d(SmbOpApi.TAG,"CurrPath = " + CurrPath);
		if(it.isFile()){
			openfile(it);
		}else{
			setTitle(path.substring(path.indexOf("@")+1));
			searchFile(path);
		}
	}

	private void setCurrPath(SmbFile sbf){
		if(!sbf.toString().equals(root)){
			CurrPath = sbf.toString();
		}else{
			CurrPath = root;
		}
	}
	
	private boolean isRoot(){
		return CurrPath.equals(root);
	}

	public static Context getContext(){
		return mContext;
	}
	
	AlertButton setAlertBt(CharSequence text, OnClickListener l ){
		AlertButton ab = new AlertButton();
		ab.text = text;
		ab.listener = l;
		return ab;
	}
	
	
	OnClickListener getDialogListener(final int id, final int whichbt,final Object...args){
		OnClickListener l = null;
		l = new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				switch(id){
				case MENU_RENAME_ID:
					if(whichbt == DLG_NEGATIVE_BT){
					}else if(whichbt == DLG_NEUTRAL_BT){
					}else if(whichbt == DLG_POSITIVE_BT){
						ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST, 
								SmbOpApi.rename(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath()),
		                    			SmbOpApi.getSmbFileByUrl(CurrPath+ ((EditText) (args[0])).getText().toString()))));
						searchFile(CurrPath);
						SelectedItem = null;
					}
					break;
				case MENU_DELETE_ID:
					if(whichbt == DLG_NEGATIVE_BT){
					}else if(whichbt == DLG_NEUTRAL_BT){
					}else if(whichbt == DLG_POSITIVE_BT){
						ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST, 
								SmbOpApi.delete(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath()))));
						searchFile(CurrPath);
						SelectedItem = null;
					}
					break;
				case MENU_PAST_ID:
					if(whichbt == DLG_NEGATIVE_BT){
						
					}else if(whichbt == DLG_NEUTRAL_BT){
						
					}else if(whichbt == DLG_POSITIVE_BT){
						
					}
					break;
				case MENU_DOWNLOAD_ID:
					if(whichbt == DLG_NEGATIVE_BT){
						BrowsLocalFileTask.setNativeCurrPath(new File(""));
					}else if(whichbt == DLG_NEUTRAL_BT){
						
					}else if(whichbt == DLG_POSITIVE_BT){
						Init.th.GetMessageHander().post(new downloadrunning(SmbOpApi.getSmbFileByUrl(SelectedItem.getPath()), BrowsLocalFileTask.getNativeCurrPath()));
					}
					break;
				case MENU_UPLOAD_ID:
					if(whichbt == DLG_NEGATIVE_BT){
						BrowsLocalFileTask.setNativeCurrPath(new File(""));
                    	BrowsLocalFileTask.getadapter().setSelectItem(-1);
					}else if(whichbt == DLG_NEUTRAL_BT){
						
					}else if(whichbt == DLG_POSITIVE_BT){
                    	File f = new File(BrowsLocalFileTask.getNativeCurrPath());
						Init.th.GetMessageHander().post(new uploadrunning(
								SmbOpApi.getSmbFileByUrl((SelectedItem == null ? CurrPath : SelectedItem.getPath()) + f.getName()), 
								BrowsLocalFileTask.getNativeCurrPath()));
						
					}
					break;
				case MENU_NEW_FOLDER_ID:
					if(whichbt == DLG_NEGATIVE_BT){
						
					}else if(whichbt == DLG_NEUTRAL_BT){
						
					}else if(whichbt == DLG_POSITIVE_BT){
						SmbFile newfolder = SmbOpApi.getSmbFileByUrl(
							(SelectedItem == null ? CurrPath : SelectedItem.getPath()) + ((EditText)(args[0])).getText().toString());
						if(!"".equals(((EditText)(args[0])).getText().toString())){
							ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST, 
									 SmbOpApi.mkdir(newfolder)) );
							searchFile(CurrPath);
						}
						SelectedItem = null;
					}
					break;
				default:
					break;
				}
			}
		};

		return l;
	}

	class pasterunning implements Runnable{
		SmbFile param;
		Runnable r;
		pasterunning(SmbFile pm){
			param = pm;
		}

		@Override
		public void run() {
			synchronized (this) {
				r = this;
				paste(param,r);
			}
		}
	}
	
	void paste(SmbFile des, Runnable r){
		String toast = "";
		ThreadInfo ti = new ThreadInfo("正在粘贴...",r);
		
		do{
			ExchangeHandler.GetExchangeHandlerInstance().showProgressDialog(/*"正在粘贴..."*/ti, ProgressDialog.STYLE_SPINNER);
			
			toast = SmbOpApi.pst(des); 
			Log.d("abc","toast = " + toast);
			ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
					Init.MsgElement(ExchangeHandler.MSG_DISMISS_PROGRESS_DLG, null));
			if(toast.contains("Success")){
				SmbOpApi.setAppendFlg(false);
					ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,toast));
			}else{
				SmbOpApi.setAppendFlg(true);
				
				ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
						Init.MsgElement(ExchangeHandler.MSG_SHOW_RETRY_DLG, des.getName(), ProgressDialog.STYLE_HORIZONTAL));
				
				ExchangeHandler.GetExchangeHandlerInstance().getSynclock().waitfor();
			}
		}while(SmbOpApi.getAppendFlg());
	}
	
	class downloadrunning implements Runnable{
		SmbFile seletcedfile;
		String target_folder;
		Runnable r;
		downloadrunning(SmbFile seletcedfile, String target_folder){
			this.seletcedfile = seletcedfile;
			this.target_folder = target_folder;
		}

		@Override
		public void run() {
			synchronized (this) {
				r = this;
				download(seletcedfile, target_folder, r);
			}
		}
	}
	
	void download(SmbFile seletcedfile, String target_folder,Runnable r){
		String toast = "";
		ThreadInfo ti = new ThreadInfo("正在下载 " + seletcedfile.getName() + " :",r);
		
		do{
			ExchangeHandler.GetExchangeHandlerInstance().showProgressDialog(ti, ProgressDialog.STYLE_HORIZONTAL);
			
			toast = SmbOpApi.dl(seletcedfile,target_folder); 
			
			ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
					Init.MsgElement(ExchangeHandler.MSG_DISMISS_PROGRESS_DLG, null));
			if(toast.contains("Success")){
					ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,toast));
			}else{
				ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
						Init.MsgElement(ExchangeHandler.MSG_SHOW_RETRY_DLG, seletcedfile.getName(), ProgressDialog.STYLE_HORIZONTAL));
				
				ExchangeHandler.GetExchangeHandlerInstance().getSynclock().waitfor();
			}
		}while(SmbOpApi.getAppendFlg());
	}
	
	class uploadrunning implements Runnable{
		SmbFile savedfile;
		String pickedfie;
		Runnable r;
		uploadrunning(SmbFile savedfile, String pickedfie){
			this.savedfile = savedfile;
			this.pickedfie = pickedfie;
		}

		@Override
		public void run() {
			synchronized (this) {
				r = this;
				upload(savedfile, pickedfie, r);
			}
		}
	}
	
	void upload(SmbFile savedfile, String pickedfie, Runnable r){
		String toast = "";
		ThreadInfo ti = new ThreadInfo("正在上传 " + savedfile.getName() + " :", r);
		
		do{
			ExchangeHandler.GetExchangeHandlerInstance().showProgressDialog(ti, ProgressDialog.STYLE_HORIZONTAL);
			
			toast = SmbOpApi.up(savedfile,pickedfie); 
			ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
					Init.MsgElement(ExchangeHandler.MSG_DISMISS_PROGRESS_DLG, null));
			
			if(toast.contains("Success")){
					ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,toast));
			}else{
				ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
						Init.MsgElement(ExchangeHandler.MSG_SHOW_RETRY_DLG, savedfile.getName(), ProgressDialog.STYLE_HORIZONTAL));
				
				ExchangeHandler.GetExchangeHandlerInstance().getSynclock().waitfor();
			}
		}while(SmbOpApi.getAppendFlg());
	}
	
	class cachefilerunning implements Runnable{
		SmbFile seletcedfile;
		String mimetype;
		Context context;
		Runnable r;
		cachefilerunning(Context context, SmbFile seletcedfile, String mimetype){
			this.seletcedfile = seletcedfile;
			this.mimetype = mimetype;
			this.context = context;
		}

		@Override
		public void run() {
			synchronized (this) {
				r = this;
				cachefile(context, seletcedfile, SmbOpApi.tmpdir , mimetype, r);
				
			}
		}
	}
	
	void cachefile(Context context, SmbFile seletcedfile, String target_folder, String mimetype, Runnable r){
		String toast = "";
		ThreadInfo ti = new ThreadInfo("正在缓存 " + seletcedfile.getName() + " :",r);
		Log.d("abc","cachefile...");
		
		do{
			ExchangeHandler.GetExchangeHandlerInstance().showProgressDialog(ti, ProgressDialog.STYLE_HORIZONTAL);
			Log.d("abc","cachefile... seletcedfile = " + seletcedfile.getPath() + ", target_file = "  + (target_folder +  seletcedfile.getName()));
			toast = SmbOpApi.dl(seletcedfile, target_folder); 
			
			ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
					Init.MsgElement(ExchangeHandler.MSG_DISMISS_PROGRESS_DLG, null));
			if(toast.contains("Success")){
					ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,toast));
			}else{
				Log.d("abc","cachefile else");
				ExchangeHandler.GetExchangeHandlerInstance().sendMessage(
						Init.MsgElement(ExchangeHandler.MSG_SHOW_RETRY_DLG, seletcedfile.getName(), ProgressDialog.STYLE_HORIZONTAL));
				
				ExchangeHandler.GetExchangeHandlerInstance().getSynclock().waitfor();
			}
		}while(SmbOpApi.getAppendFlg());

		if(toast.contains("Success")){
			OpenFile(context, target_folder+seletcedfile.getName(), mimetype);
		}
	}
	
	void OpenFile(Context context, String target_file, String mimetype){
		File file = new File(target_file);
		
		Intent intent = new Intent(android.content.Intent.ACTION_VIEW);
		Uri uri = Uri.fromFile(file);
		intent.setDataAndType(uri, mimetype);
		try {
			context.startActivity(intent);
		} catch (ActivityNotFoundException e) {
			ExchangeHandler.GetExchangeHandlerInstance().sendMessage(Init.MsgElement(ExchangeHandler.MSG_SHOW_TOAST,"未知文件"));
	    }
	}
}