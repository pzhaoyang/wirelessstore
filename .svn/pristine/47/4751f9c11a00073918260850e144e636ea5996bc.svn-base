package com.uninet.xiaoyou.net;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.uninet.xiaoyou.R;
import com.uninet.xiaoyou.Utility;

/**
 * 自动更新工具类
 * @author chenggong
 *
 */
public class UpdateManager {
	/* 保存解析的XML信息 */
	HashMap<String, String> mHashMap;
	/* 下载保存路径 */
	private String mSavePath;
	/* 是否取消更新 */
	private boolean cancelUpdate = false;

	private Context mContext;
	int version_count, serviceCode;

	public UpdateManager(Context context) {
		this.mContext = context;
	}

	@SuppressLint("HandlerLeak") 
	Handler myHandler = new Handler() {
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			// 显示提示对话框
			showNoticeDialog();
		}
	};

	class Update extends Thread {
		/**
		 * 检查软件是否有更新版本
		 * 
		 * @return
		 */

		private void isUpdate() {
			try {
				// 获取当前软件版本
				int versionCode = getVersionCode(mContext);
				// 把version.xml放到网络上，然后获取文件信息
				// InputStream inStream = ParseXmlService.class.getClassLoader()
				// .getResourceAsStream("version.xml");
				URL url;

				url = new URL(Utility.update_server_addr + Utility.update_xml);

				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				conn.connect();
				conn.getContentLength();
				// 创建输入流
				InputStream inStream = conn.getInputStream();
				// 解析XML文件
				ParseXmlService service = new ParseXmlService();

				mHashMap = service.parseXml(inStream);

				if (null != mHashMap) {
					version_count = Integer.valueOf(mHashMap
							.get("version_count"));
					if (Utility.logable)
						Log.d(Utility.TAG, "map : " + mHashMap.toString());
					serviceCode = Integer.valueOf(mHashMap.get("version_code"
							+ version_count));
					if (Utility.logable)
						Log.d(Utility.TAG, "serviceCode = " + serviceCode);
					// 版本判断
					if (serviceCode > versionCode) {
						Message message = new Message();
						myHandler.sendMessage(message);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public void run() {
			isUpdate();
		}
	}

	/**
	 * 检测软件更新
	 */
	public void checkUpdate() {
		new Update().start();
	}

	/**
	 * 获取软件版本号
	 * 
	 * @param context
	 * @return
	 */
	private int getVersionCode(Context context) {
		int versionCode = 0;
		try {
			// 获取软件版本号，对应AndroidManifest.xml下android:versionCode
			versionCode = context.getPackageManager().getPackageInfo(
					"com.uninet.remotecontrol", 0).versionCode;
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		return versionCode;
	}

	/**
	 * 显示软件更新对话框
	 */
	private void showNoticeDialog() {
		// 构造对话框
		AlertDialog.Builder builder = new Builder(mContext);
		builder.setTitle(R.string.soft_update_title);
		builder.setMessage(R.string.soft_update_info);
		// 更新
		builder.setPositiveButton(R.string.soft_update_updatebtn,
				new OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
						// 显示下载对话框
						// showDownloadDialog();
						// 下载文件
						downloadApk();
					}
				});
		// 稍后更新
		builder.setNegativeButton(R.string.soft_update_later,
				new OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
		Dialog noticeDialog = builder.create();
		noticeDialog.show();
	}

	/**
	 * 显示软件下载对话框
	 */
//	private void showDownloadDialog() {
//		AlertDialog.Builder builder = new Builder(mContext);
//		builder.setTitle(R.string.soft_updating);
//		builder.setMessage(R.string.soft_update_info);
//		// 取消更新
//		builder.setNegativeButton(R.string.cancel, new OnClickListener() {
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				dialog.dismiss();
//				// 设置取消状态
//				cancelUpdate = true;
//			}
//		});
//		Dialog mDownloadDialog = builder.create();
//		mDownloadDialog.show();
//		// 下载文件
//		downloadApk();
//	}

	/**
	 * 下载apk文件
	 */
	private void downloadApk() {
		// 启动新线程下载软件
		new downloadApkThread().start();
	}

	// 下载文件线程
	private class downloadApkThread extends Thread {
		@Override
		public void run() {
			try {
				// 判断SD卡是否存在，并且是否具有读写权限
				if (Environment.getExternalStorageState().equals(
						Environment.MEDIA_MOUNTED)) {
					// 获得存储卡的路径
					String sdpath = Environment.getExternalStorageDirectory()
							+ "/";
					mSavePath = sdpath + "download";
					URL url = new URL(Utility.update_server_addr
							+ mHashMap.get("path" + version_count));
					// 创建连接
					HttpURLConnection conn = (HttpURLConnection) url
							.openConnection();
					conn.connect();
					conn.getContentLength();
					// 创建输入流
					InputStream is = conn.getInputStream();

					File file = new File(mSavePath);
					// 判断文件目录是否存在
					if (!file.exists()) {
						file.mkdir();
					}
					File apkFile = new File(mSavePath, mHashMap.get("path"
							+ version_count));
					FileOutputStream fos = new FileOutputStream(apkFile);
					// 缓存
					byte buf[] = new byte[1024];
					// 写入到文件中
					do {
						int numread = is.read(buf);
						if (numread <= 0) {
							// 下载完成
							installApk();
							break;
						}
						// 写入文件
						fos.write(buf, 0, numread);
					} while (!cancelUpdate);// 点击取消就停止下载.
					fos.close();
					is.close();
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			// 取消下载对话框显示
			// dialog.dismiss();
		}
	};

	/**
	 * 安装APK文件
	 */
	private void installApk() {
		File apkfile = new File(mSavePath, mHashMap.get("path" + version_count));
		if (!apkfile.exists()) {
			return;
		}
		// 通过Intent安装APK文件
		Intent i = new Intent(Intent.ACTION_VIEW);
		i.setDataAndType(Uri.parse("file://" + apkfile.toString()),
				"application/vnd.android.package-archive");
		mContext.startActivity(i);
	}

}