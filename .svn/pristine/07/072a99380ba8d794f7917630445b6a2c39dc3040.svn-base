package com.uninet.xiaoyou.net;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import jcifs.util.Base64;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.os.Message;
import android.text.format.Formatter;
import android.util.Log;
import android.widget.Toast;

import com.uninet.xiaoyou.FunctionSelectionActivity;
import com.uninet.xiaoyou.ShowProgressDialog;
import com.uninet.xiaoyou.Utility;
import com.uninet.xiaoyou.routemanager.RouteManagerActivity;
import com.uninet.xiaoyou.routemanager.ShowListActivity;

/**
 * 网络交互操作
 * 
 * @author chenggong
 * 
 */
public class DataInteractionThread extends Thread {
	private HttpURLConnection conn;
	private static ParseJSONMessage getmsg;
	static JSONObject postmsg = new JSONObject();;
	static String path;
	// 是否需要鉴权
	static boolean isWithAuthorization = false;
	// 是否是post消息
	static boolean ispost = false;

	private Context mContext;
	// 具体操作内容
	private int whitch;
	private String value;
	// 鉴权信息
	private String username;
	private String password;
	private boolean isServer = false;
	// TODO 错误信息
	private static String error = "error message";

	// 获取相应信息后通知界面刷新
	@SuppressLint("HandlerLeak")
	Handler handler = new Handler() {
		@SuppressLint("ShowToast")
		@Override
		public void handleMessage(Message msg) {
			if (isServer) {
				ShowProgressDialog.dismiss();
				Log.d(Utility.TAG,"get_result : " + get_result());
				if (get_result().equals("0")) {
					Toast.makeText(mContext, "Server Success", 0).show();
					mContext.startActivity(new Intent(mContext, FunctionSelectionActivity.class));
				} else {
					Toast.makeText(mContext, "Server Error " + get_result(), 0)
							.show();
				}
				
			} else {
				if(msg.what == Utility.login){
					ShowProgressDialog.dismiss();
					if (get_result().equals("0")) {
						Toast.makeText(mContext, "Server Success", 0).show();
						mContext.startActivity(new Intent(mContext, FunctionSelectionActivity.class));
					} else {
						Toast.makeText(mContext, "Server Error " + get_result(), 0)
								.show();
					}
				} else if (msg.what <= Utility.firmware_upgrade
						&& msg.what >= Utility.network_info) {
					//ShowListActivity showlist = new ShowListActivity();
					//showlist.refresh(msg.what);
//					RouteManagerActivity routemanager = new RouteManagerActivity();
//					routemanager.refresh(msg.what);
				} else {
					if (get_result().equals("0")) {
						Toast.makeText(mContext, "Success", 0).show();
					} else {
						Toast.makeText(mContext, "Error " + get_result(), 0)
								.show();
					}

				}
			}
			super.handleMessage(msg);
		}
	};

	private String version_out = null;

	/**
	 * 空构造方法,便于调用查询方法
	 * 
	 * @param _context
	 */
	public DataInteractionThread() {
	}

	/**
	 * 构造方法,用于与远程进行交互
	 * 
	 * @param _context
	 */
	public DataInteractionThread(Context _context, int _whitch, String uname,
			String pword, String _value, boolean where) {
		mContext = _context;
		whitch = _whitch;
		username = uname;
		password = pword;
		value = _value;
		isServer = where;
	}

	/**
	 * 获取当前连接的网关IP
	 * 
	 * @return
	 */
	@SuppressWarnings("deprecation")
	private String getGateWay() {

		WifiManager wm = (WifiManager) mContext
				.getSystemService(Context.WIFI_SERVICE);
		String getway = Formatter.formatIpAddress(wm.getDhcpInfo().gateway);

		return getway;
	}

	/**
	 * 开启远程连接，连接当前网关，发送消息
	 * 
	 * @param isWithAuthorization
	 *            是否需要鉴权
	 * @param ispost
	 *            是否是post消息
	 * @return boolean
	 */
	private boolean connect() {
		URL url;
		try {
			if (isServer) {
				url = new URL("http://27.115.113.62:8080/uninet" + path);
				Log.d(Utility.TAG,"url : " + url);
			} else {
				url = new URL("http://" + getGateWay() + path);
			}
			conn = (HttpURLConnection) url.openConnection();
			conn.setConnectTimeout(5000);
			if (isWithAuthorization) {
				conn.setDoInput(true);
				conn.setAllowUserInteraction(true);
				conn.setRequestProperty(
						"Authorization",
						"Basic "
								+ Base64.encode((username + ":" + password)
										.getBytes()));
				Log.d(Utility.TAG,"Authorization : " + conn.getRequestProperties());
			}
			if (ispost) {
				conn.setDoInput(true);
				conn.setRequestMethod("POST");
			}
			conn.connect();
			return true;
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return false;
	}

	/**
	 * 获取远程返回
	 */
	private void getInfo() {
		try {
			if (ispost) {
				DataOutputStream out = new DataOutputStream(
						conn.getOutputStream());
				out.write(postmsg.toString().getBytes());
				out.flush();
				out.close();
			}
			Log.d(Utility.TAG,"response code : " + conn.getResponseCode());
			DataInputStream in = new DataInputStream(conn.getInputStream());
			getmsg = new ParseJSONMessage(in);
			conn.disconnect();
			in.close();
		} catch (MalformedURLException e) {
			Log.d(Utility.TAG, "MalformedURLException");
		} catch (IOException e) {
			e.printStackTrace();
//			Log.d(Utility.TAG, "IOException");
		}
	}

	/**
	 * 获取远程返回的结果
	 * 
	 * @return String 0：success 1：鉴权失败 2：功能不支持 3：未知错误
	 */
	public String get_result() {
		String result = null;
		try {
			result = getmsg.getJSONValue("result");
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * 获取百度云开启状态
	 * 
	 * @return String
	 */
	public String get_baiducloud_opened() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("baiducloud_opened");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取百度云用户名
	 * 
	 * @return String
	 */
	public String get_baiducloud_username() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("baiducloud_username");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取百度云密码
	 * 
	 * @return String
	 */
	public String get_baiducloud_password() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("baiducloud_password");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取USB模式
	 * 
	 * @return String
	 */
	public String get_usb_mode() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("usb_mode");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取wifi ssid
	 * 
	 * @return String
	 */
	public String get_ssid() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("ssid");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取wifi密码类型
	 * 
	 * @return String
	 */
	public String get_type() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("type");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取wifi密码
	 * 
	 * @return String
	 */
	public String get_password() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("password");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取wifi穿墙模式
	 * 
	 * @return String
	 */
	public String get_wifi_power() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("wifi_power");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取wifi工作模式
	 * 
	 * @return String
	 */
	public String get_wifi_mode() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("wifi_mode");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取外部版本号
	 * 
	 * @return String
	 */
	public String get_version_out() {
		if (version_out != null) {
			return version_out;
		}
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("version_out");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取内部版本号
	 * 
	 * @return String
	 */
	public String get_version_in() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("version_in");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取项目信息
	 * 
	 * @return String
	 */
	public String get_product() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("product");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	/**
	 * 获取name
	 * 
	 * @return String
	 */
	public String get_name() {
		if (get_result().equals("0")) {
			try {
				return getmsg.getJSONValue("name");
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return error;
	}

	@Override
	public void run() {
		if (isServer) {
			switch (whitch) {
			case Utility.login:
				GetFromRemote.server_login();
				break;
			case Utility.register:
				PostToRemote.server_regist(username, password);
				break;
			case Utility.update_pword:
				PostToRemote.server_update_password("");
				break;
			}
			connect();
			getInfo();
			Message msg = new Message();
			msg.what = whitch;
			handler.sendMessage(msg);
		} else {
			switch (whitch) {
			case Utility.login:
				GetFromRemote.login();
				break;
			case Utility.network_info:
				GetFromRemote.getSsid();
				break;
			case Utility.through_wall_settings:
				GetFromRemote.getWifipower();
				break;
			case Utility.switch_work_mode:
				GetFromRemote.getWifimode();
				break;
			case Utility.wireless_settings:
				GetFromRemote.getSsid();
				break;
			case Utility.user_management:
				break;
			case Utility.soft_version:
				// 先获取外部版本号
				GetFromRemote.getDeviceVersion();
				connect();
				getInfo();
				// 先把版本号保存到变量
				version_out = get_version_out();
				// 再获取产品信息，此时JSON数据会被更新，无法从中获取到之前的版本号
				GetFromRemote.getProduct();
				break;
			case Utility.firmware_upgrade:
				break;
			case Utility.set_through_wall_mode:
				PostToRemote.setWifipower(value);
				break;
			default:
				break;
			}
			connect();
			getInfo();
			handler.sendEmptyMessage(whitch);
		}
	}
}